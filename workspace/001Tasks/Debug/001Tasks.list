
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d4  080031d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d80  20000010  080031ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012d90  080031ec  00022d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d19b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e5  00000000  00000000  0002d21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5b  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c66  00000000  00000000  00030bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001016c  00000000  00000000  00053821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc8f  00000000  00000000  0006398d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000370c  00000000  00000000  0013f61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00142d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003164 	.word	0x08003164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003164 	.word	0x08003164

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fa43 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f829 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f895 	bl	8000648 <MX_GPIO_Init>
  TaskHandle_t task2_handle;

  BaseType_t status;


  status =  xTaskCreate(task1_handler, "Task 1", 200, "Hello world from Task-1", 2, &task1_handle);
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2302      	movs	r3, #2
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x4c>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	490b      	ldr	r1, [pc, #44]	; (800055c <main+0x50>)
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x54>)
 8000530:	f001 fe1b 	bl	800216a <xTaskCreate>
 8000534:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS)
 8000536:	2301      	movs	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]

  status =  xTaskCreate(task2_handler, "Task 1", 200, "Hello world from Task-2", 2, &task2_handle);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2302      	movs	r3, #2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <main+0x58>)
 8000544:	22c8      	movs	r2, #200	; 0xc8
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <main+0x50>)
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <main+0x5c>)
 800054a:	f001 fe0e 	bl	800216a <xTaskCreate>
 800054e:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS)
 8000550:	2301      	movs	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x48>
 8000556:	bf00      	nop
 8000558:	0800317c 	.word	0x0800317c
 800055c:	08003194 	.word	0x08003194
 8000560:	08000745 	.word	0x08000745
 8000564:	0800319c 	.word	0x0800319c
 8000568:	08000759 	.word	0x08000759

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fdc6 	bl	800310c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <SystemClock_Config+0xd4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a29      	ldr	r2, [pc, #164]	; (8000640 <SystemClock_Config+0xd4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <SystemClock_Config+0xd4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <SystemClock_Config+0xd8>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <SystemClock_Config+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e0:	2310      	movs	r3, #16
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f808 	bl	8001610 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000606:	f000 f8c3 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fc8a 	bl	8000f40 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000632:	f000 f8ad 	bl	8000790 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a34      	ldr	r2, [pc, #208]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2d      	ldr	r2, [pc, #180]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xf0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_GPIO_Init+0xf0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a26      	ldr	r2, [pc, #152]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <MX_GPIO_Init+0xf4>)
 80006d4:	f000 fc1a 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <MX_GPIO_Init+0xf8>)
 80006f0:	f000 fa78 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000704:	2307      	movs	r3, #7
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0xf4>)
 8000710:	f000 fa68 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0xf4>)
 800072c:	f000 fa5a 	bl	8000be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020800 	.word	0x40020800

08000744 <task1_handler>:

/* USER CODE BEGIN 4 */

void task1_handler(void* parameters)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <task2_handler>:

void task2_handler(void* parameters)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 f92f 	bl	80009e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40001000 	.word	0x40001000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <HAL_InitTick+0xe4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <HAL_InitTick+0xe4>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <HAL_InitTick+0xe4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fc92 	bl	800114c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000832:	f000 fc77 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
 8000836:	6378      	str	r0, [r7, #52]	; 0x34
 8000838:	e004      	b.n	8000844 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800083a:	f000 fc73 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
 800083e:	4603      	mov	r3, r0
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <HAL_InitTick+0xe8>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	0c9b      	lsrs	r3, r3, #18
 800084e:	3b01      	subs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <HAL_InitTick+0xec>)
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <HAL_InitTick+0xf0>)
 8000856:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_InitTick+0xec>)
 800085a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800085e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <HAL_InitTick+0xec>)
 8000862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000864:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_InitTick+0xec>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_InitTick+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_InitTick+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <HAL_InitTick+0xec>)
 800087a:	f001 f967 	bl	8001b4c <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000888:	2b00      	cmp	r3, #0
 800088a:	d11b      	bne.n	80008c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800088c:	4812      	ldr	r0, [pc, #72]	; (80008d8 <HAL_InitTick+0xec>)
 800088e:	f001 f9b7 	bl	8001c00 <HAL_TIM_Base_Start_IT>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089c:	2b00      	cmp	r3, #0
 800089e:	d111      	bne.n	80008c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	f000 f991 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d808      	bhi.n	80008be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2036      	movs	r0, #54	; 0x36
 80008b2:	f000 f96d 	bl	8000b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_InitTick+0xf4>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	e002      	b.n	80008c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3738      	adds	r7, #56	; 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	2000002c 	.word	0x2000002c
 80008dc:	40001000 	.word	0x40001000
 80008e0:	20000004 	.word	0x20000004

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM6_DAC_IRQHandler+0x10>)
 8000916:	f001 f9e3 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000002c 	.word	0x2000002c

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800094c:	f7ff ffea 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000976:	f002 fbd1 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fdc7 	bl	800050c <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800098c:	080031dc 	.word	0x080031dc
  ldr r2, =_sbss
 8000990:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000994:	20012d90 	.word	0x20012d90

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <HAL_Init+0x40>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_Init+0x40>)
 80009b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x40>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f8d8 	bl	8000b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff0e 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fee4 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023c00 	.word	0x40023c00

080009e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000074 	.word	0x20000074

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000074 	.word	0x20000074

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff4c 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba2:	f7ff ff61 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	6978      	ldr	r0, [r7, #20]
 8000bae:	f7ff ffb1 	bl	8000b14 <NVIC_EncodePriority>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff80 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff54 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	e165      	b.n	8000ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c00:	2201      	movs	r2, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	f040 8154 	bne.w	8000ec6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d005      	beq.n	8000c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d130      	bne.n	8000c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	f003 0201 	and.w	r2, r3, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d017      	beq.n	8000cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d123      	bne.n	8000d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	69b9      	ldr	r1, [r7, #24]
 8000d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0203 	and.w	r2, r3, #3
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80ae 	beq.w	8000ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <HAL_GPIO_Init+0x300>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a5c      	ldr	r2, [pc, #368]	; (8000ee4 <HAL_GPIO_Init+0x300>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <HAL_GPIO_Init+0x300>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d86:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <HAL_GPIO_Init+0x308>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d025      	beq.n	8000dfe <HAL_GPIO_Init+0x21a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <HAL_GPIO_Init+0x30c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d01f      	beq.n	8000dfa <HAL_GPIO_Init+0x216>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4d      	ldr	r2, [pc, #308]	; (8000ef4 <HAL_GPIO_Init+0x310>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x212>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x20e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x20a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x206>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x202>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e00c      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e00a      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000dea:	2305      	movs	r3, #5
 8000dec:	e008      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x21c>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e10:	4935      	ldr	r1, [pc, #212]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_GPIO_Init+0x324>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b0f      	cmp	r3, #15
 8000ed0:	f67f ae96 	bls.w	8000c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0cc      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d90c      	bls.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f62:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e0b8      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d020      	beq.n	8000fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fac:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	494d      	ldr	r1, [pc, #308]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d044      	beq.n	8001060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e07f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e067      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f023 0203 	bic.w	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4934      	ldr	r1, [pc, #208]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001030:	f7ff fcea 	bl	8000a08 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	e00a      	b.n	800104e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fce6 	bl	8000a08 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f241 3288 	movw	r2, #5000	; 0x1388
 8001046:	4293      	cmp	r3, r2
 8001048:	d901      	bls.n	800104e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e04f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 020c 	and.w	r2, r3, #12
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	d1eb      	bne.n	8001038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d20c      	bcs.n	8001088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e032      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4916      	ldr	r1, [pc, #88]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010c6:	f000 f873 	bl	80011b0 <HAL_RCC_GetSysClockFreq>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	5ccb      	ldrb	r3, [r1, r3]
 80010da:	fa22 f303 	lsr.w	r3, r2, r3
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_ClockConfig+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fb80 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	080031b4 	.word	0x080031b4
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_RCC_GetHCLKFreq+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001128:	f7ff fff0 	bl	800110c <HAL_RCC_GetHCLKFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	0a9b      	lsrs	r3, r3, #10
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	4903      	ldr	r1, [pc, #12]	; (8001148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	080031c4 	.word	0x080031c4

0800114c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	220f      	movs	r2, #15
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_RCC_GetClockConfig+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 020f 	and.w	r2, r3, #15
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b4:	b0ae      	sub	sp, #184	; 0xb8
 80011b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011d6:	4bcb      	ldr	r3, [pc, #812]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	f200 8206 	bhi.w	80015f0 <HAL_RCC_GetSysClockFreq+0x440>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	08001221 	.word	0x08001221
 80011f0:	080015f1 	.word	0x080015f1
 80011f4:	080015f1 	.word	0x080015f1
 80011f8:	080015f1 	.word	0x080015f1
 80011fc:	08001229 	.word	0x08001229
 8001200:	080015f1 	.word	0x080015f1
 8001204:	080015f1 	.word	0x080015f1
 8001208:	080015f1 	.word	0x080015f1
 800120c:	08001231 	.word	0x08001231
 8001210:	080015f1 	.word	0x080015f1
 8001214:	080015f1 	.word	0x080015f1
 8001218:	080015f1 	.word	0x080015f1
 800121c:	08001421 	.word	0x08001421
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001220:	4bb9      	ldr	r3, [pc, #740]	; (8001508 <HAL_RCC_GetSysClockFreq+0x358>)
 8001222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001226:	e1e7      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001228:	4bb8      	ldr	r3, [pc, #736]	; (800150c <HAL_RCC_GetSysClockFreq+0x35c>)
 800122a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800122e:	e1e3      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001230:	4bb4      	ldr	r3, [pc, #720]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800123c:	4bb1      	ldr	r3, [pc, #708]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d071      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001248:	4bae      	ldr	r3, [pc, #696]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	099b      	lsrs	r3, r3, #6
 800124e:	2200      	movs	r2, #0
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001254:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800125c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800126a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800126e:	4622      	mov	r2, r4
 8001270:	462b      	mov	r3, r5
 8001272:	f04f 0000 	mov.w	r0, #0
 8001276:	f04f 0100 	mov.w	r1, #0
 800127a:	0159      	lsls	r1, r3, #5
 800127c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001280:	0150      	lsls	r0, r2, #5
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4621      	mov	r1, r4
 8001288:	1a51      	subs	r1, r2, r1
 800128a:	6439      	str	r1, [r7, #64]	; 0x40
 800128c:	4629      	mov	r1, r5
 800128e:	eb63 0301 	sbc.w	r3, r3, r1
 8001292:	647b      	str	r3, [r7, #68]	; 0x44
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80012a0:	4649      	mov	r1, r9
 80012a2:	018b      	lsls	r3, r1, #6
 80012a4:	4641      	mov	r1, r8
 80012a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012aa:	4641      	mov	r1, r8
 80012ac:	018a      	lsls	r2, r1, #6
 80012ae:	4641      	mov	r1, r8
 80012b0:	1a51      	subs	r1, r2, r1
 80012b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80012b4:	4649      	mov	r1, r9
 80012b6:	eb63 0301 	sbc.w	r3, r3, r1
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80012c8:	4649      	mov	r1, r9
 80012ca:	00cb      	lsls	r3, r1, #3
 80012cc:	4641      	mov	r1, r8
 80012ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012d2:	4641      	mov	r1, r8
 80012d4:	00ca      	lsls	r2, r1, #3
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	4622      	mov	r2, r4
 80012de:	189b      	adds	r3, r3, r2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
 80012e2:	462b      	mov	r3, r5
 80012e4:	460a      	mov	r2, r1
 80012e6:	eb42 0303 	adc.w	r3, r2, r3
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012f8:	4629      	mov	r1, r5
 80012fa:	024b      	lsls	r3, r1, #9
 80012fc:	4621      	mov	r1, r4
 80012fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001302:	4621      	mov	r1, r4
 8001304:	024a      	lsls	r2, r1, #9
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800130e:	2200      	movs	r2, #0
 8001310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001318:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800131c:	f7fe ff78 	bl	8000210 <__aeabi_uldivmod>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4613      	mov	r3, r2
 8001326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800132a:	e067      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132c:	4b75      	ldr	r3, [pc, #468]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	2200      	movs	r2, #0
 8001334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001338:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800133c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001344:	67bb      	str	r3, [r7, #120]	; 0x78
 8001346:	2300      	movs	r3, #0
 8001348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800134a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800134e:	4622      	mov	r2, r4
 8001350:	462b      	mov	r3, r5
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	0159      	lsls	r1, r3, #5
 800135c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001360:	0150      	lsls	r0, r2, #5
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4621      	mov	r1, r4
 8001368:	1a51      	subs	r1, r2, r1
 800136a:	62b9      	str	r1, [r7, #40]	; 0x28
 800136c:	4629      	mov	r1, r5
 800136e:	eb63 0301 	sbc.w	r3, r3, r1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001380:	4649      	mov	r1, r9
 8001382:	018b      	lsls	r3, r1, #6
 8001384:	4641      	mov	r1, r8
 8001386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800138a:	4641      	mov	r1, r8
 800138c:	018a      	lsls	r2, r1, #6
 800138e:	4641      	mov	r1, r8
 8001390:	ebb2 0a01 	subs.w	sl, r2, r1
 8001394:	4649      	mov	r1, r9
 8001396:	eb63 0b01 	sbc.w	fp, r3, r1
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013ae:	4692      	mov	sl, r2
 80013b0:	469b      	mov	fp, r3
 80013b2:	4623      	mov	r3, r4
 80013b4:	eb1a 0303 	adds.w	r3, sl, r3
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	462b      	mov	r3, r5
 80013bc:	eb4b 0303 	adc.w	r3, fp, r3
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013ce:	4629      	mov	r1, r5
 80013d0:	028b      	lsls	r3, r1, #10
 80013d2:	4621      	mov	r1, r4
 80013d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013d8:	4621      	mov	r1, r4
 80013da:	028a      	lsls	r2, r1, #10
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013e4:	2200      	movs	r2, #0
 80013e6:	673b      	str	r3, [r7, #112]	; 0x70
 80013e8:	677a      	str	r2, [r7, #116]	; 0x74
 80013ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013ee:	f7fe ff0f 	bl	8000210 <__aeabi_uldivmod>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4613      	mov	r3, r2
 80013f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013fc:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 800140e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800141e:	e0eb      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d06b      	beq.n	8001510 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	66bb      	str	r3, [r7, #104]	; 0x68
 8001442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144a:	663b      	str	r3, [r7, #96]	; 0x60
 800144c:	2300      	movs	r3, #0
 800144e:	667b      	str	r3, [r7, #100]	; 0x64
 8001450:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001454:	4622      	mov	r2, r4
 8001456:	462b      	mov	r3, r5
 8001458:	f04f 0000 	mov.w	r0, #0
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	0159      	lsls	r1, r3, #5
 8001462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001466:	0150      	lsls	r0, r2, #5
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4621      	mov	r1, r4
 800146e:	1a51      	subs	r1, r2, r1
 8001470:	61b9      	str	r1, [r7, #24]
 8001472:	4629      	mov	r1, r5
 8001474:	eb63 0301 	sbc.w	r3, r3, r1
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001486:	4659      	mov	r1, fp
 8001488:	018b      	lsls	r3, r1, #6
 800148a:	4651      	mov	r1, sl
 800148c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001490:	4651      	mov	r1, sl
 8001492:	018a      	lsls	r2, r1, #6
 8001494:	4651      	mov	r1, sl
 8001496:	ebb2 0801 	subs.w	r8, r2, r1
 800149a:	4659      	mov	r1, fp
 800149c:	eb63 0901 	sbc.w	r9, r3, r1
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b4:	4690      	mov	r8, r2
 80014b6:	4699      	mov	r9, r3
 80014b8:	4623      	mov	r3, r4
 80014ba:	eb18 0303 	adds.w	r3, r8, r3
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	462b      	mov	r3, r5
 80014c2:	eb49 0303 	adc.w	r3, r9, r3
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014d4:	4629      	mov	r1, r5
 80014d6:	024b      	lsls	r3, r1, #9
 80014d8:	4621      	mov	r1, r4
 80014da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014de:	4621      	mov	r1, r4
 80014e0:	024a      	lsls	r2, r1, #9
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ea:	2200      	movs	r2, #0
 80014ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80014ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014f4:	f7fe fe8c 	bl	8000210 <__aeabi_uldivmod>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4613      	mov	r3, r2
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001502:	e065      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x420>
 8001504:	40023800 	.word	0x40023800
 8001508:	00f42400 	.word	0x00f42400
 800150c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001510:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <HAL_RCC_GetSysClockFreq+0x458>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	2200      	movs	r2, #0
 8001518:	4618      	mov	r0, r3
 800151a:	4611      	mov	r1, r2
 800151c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001520:	653b      	str	r3, [r7, #80]	; 0x50
 8001522:	2300      	movs	r3, #0
 8001524:	657b      	str	r3, [r7, #84]	; 0x54
 8001526:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800152a:	4642      	mov	r2, r8
 800152c:	464b      	mov	r3, r9
 800152e:	f04f 0000 	mov.w	r0, #0
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	0159      	lsls	r1, r3, #5
 8001538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153c:	0150      	lsls	r0, r2, #5
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4641      	mov	r1, r8
 8001544:	1a51      	subs	r1, r2, r1
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	4649      	mov	r1, r9
 800154a:	eb63 0301 	sbc.w	r3, r3, r1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800155c:	4659      	mov	r1, fp
 800155e:	018b      	lsls	r3, r1, #6
 8001560:	4651      	mov	r1, sl
 8001562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001566:	4651      	mov	r1, sl
 8001568:	018a      	lsls	r2, r1, #6
 800156a:	4651      	mov	r1, sl
 800156c:	1a54      	subs	r4, r2, r1
 800156e:	4659      	mov	r1, fp
 8001570:	eb63 0501 	sbc.w	r5, r3, r1
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	00eb      	lsls	r3, r5, #3
 800157e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001582:	00e2      	lsls	r2, r4, #3
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	4643      	mov	r3, r8
 800158a:	18e3      	adds	r3, r4, r3
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	464b      	mov	r3, r9
 8001590:	eb45 0303 	adc.w	r3, r5, r3
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015a2:	4629      	mov	r1, r5
 80015a4:	028b      	lsls	r3, r1, #10
 80015a6:	4621      	mov	r1, r4
 80015a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015ac:	4621      	mov	r1, r4
 80015ae:	028a      	lsls	r2, r1, #10
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b8:	2200      	movs	r2, #0
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80015bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015c2:	f7fe fe25 	bl	8000210 <__aeabi_uldivmod>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4613      	mov	r3, r2
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_RCC_GetSysClockFreq+0x458>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	0f1b      	lsrs	r3, r3, #28
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 80015de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ee:	e003      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_GetSysClockFreq+0x45c>)
 80015f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	37b8      	adds	r7, #184	; 0xb8
 8001600:	46bd      	mov	sp, r7
 8001602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	00f42400 	.word	0x00f42400

08001610 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e28d      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8083 	beq.w	8001736 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001630:	4b94      	ldr	r3, [pc, #592]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d019      	beq.n	8001670 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800163c:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
        || \
 8001644:	2b08      	cmp	r3, #8
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001648:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001654:	d00c      	beq.n	8001670 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d112      	bne.n	8001688 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166e:	d10b      	bne.n	8001688 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4b84      	ldr	r3, [pc, #528]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d05b      	beq.n	8001734 <HAL_RCC_OscConfig+0x124>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d157      	bne.n	8001734 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e25a      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x90>
 8001692:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7b      	ldr	r2, [pc, #492]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0xcc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0xb4>
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a75      	ldr	r2, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a72      	ldr	r2, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xcc>
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a6b      	ldr	r2, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff f990 	bl	8000a08 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff f98c 	bl	8000a08 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e21f      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xdc>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f97c 	bl	8000a08 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff f978 	bl	8000a08 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e20b      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	4b57      	ldr	r3, [pc, #348]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x104>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d06f      	beq.n	8001822 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001742:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d017      	beq.n	800177e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
        || \
 8001756:	2b08      	cmp	r3, #8
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b44      	ldr	r3, [pc, #272]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x186>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1d3      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x278>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff f925 	bl	8000a08 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff f921 	bl	8000a08 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1b4      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4925      	ldr	r1, [pc, #148]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x278>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff f904 	bl	8000a08 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff f900 	bl	8000a08 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e193      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d036      	beq.n	800189c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f8e4 	bl	8000a08 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff f8e0 	bl	8000a08 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e173      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x234>
 8001862:	e01b      	b.n	800189c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff f8cd 	bl	8000a08 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e00e      	b.n	8001890 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff f8c9 	bl	8000a08 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d907      	bls.n	8001890 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e15c      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ea      	bne.n	8001872 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8097 	beq.w	80019d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10f      	bne.n	80018da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b7f      	ldr	r3, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a7e      	ldr	r2, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a75      	ldr	r2, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f889 	bl	8000a08 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7ff f885 	bl	8000a08 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e118      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x4b0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x31e>
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x358>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x340>
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x358>
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d015      	beq.n	800199c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f84a 	bl	8000a08 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff f846 	bl	8000a08 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0d7      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ee      	beq.n	8001978 <HAL_RCC_OscConfig+0x368>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f834 	bl	8000a08 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff f830 	bl	8000a08 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0c1      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ba:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ee      	bne.n	80019a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80ad 	beq.w	8001b3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d060      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d145      	bne.n	8001a82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_OscConfig+0x4b4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f804 	bl	8000a08 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f800 	bl	8000a08 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e093      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	071b      	lsls	r3, r3, #28
 8001a4e:	491b      	ldr	r1, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4b4>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ffd5 	bl	8000a08 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe ffd1 	bl	8000a08 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e064      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x452>
 8001a80:	e05c      	b.n	8001b3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x4b4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7fe ffbe 	bl	8000a08 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe ffba 	bl	8000a08 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04d      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x480>
 8001aae:	e045      	b.n	8001b3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e040      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x538>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d030      	beq.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d129      	bne.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d122      	bne.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d119      	bne.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10f      	bne.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9c0 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d001      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e04e      	b.n	8001cb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c42:	d01d      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d018      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00e      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d010      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	e007      	b.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00
 8001cd4:	40010400 	.word	0x40010400
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40001800 	.word	0x40001800

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d020      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0202 	mvn.w	r2, #2
 8001d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8d2 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8c4 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8d5 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d020      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8ac 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f89e 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8af 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d020      	beq.n	8001ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0208 	mvn.w	r2, #8
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2204      	movs	r2, #4
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f886 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f878 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f889 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d020      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0210 	mvn.w	r2, #16
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f860 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f852 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f863 	bl	8001ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fc90 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f906 	bl	800207c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f834 	bl	8001efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8d8 	bl	8002068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a46      	ldr	r2, [pc, #280]	; (800203c <TIM_Base_SetConfig+0x12c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a43      	ldr	r2, [pc, #268]	; (8002040 <TIM_Base_SetConfig+0x130>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a42      	ldr	r2, [pc, #264]	; (8002044 <TIM_Base_SetConfig+0x134>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a41      	ldr	r2, [pc, #260]	; (8002048 <TIM_Base_SetConfig+0x138>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a40      	ldr	r2, [pc, #256]	; (800204c <TIM_Base_SetConfig+0x13c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a35      	ldr	r2, [pc, #212]	; (800203c <TIM_Base_SetConfig+0x12c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d027      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a32      	ldr	r2, [pc, #200]	; (8002040 <TIM_Base_SetConfig+0x130>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d023      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <TIM_Base_SetConfig+0x134>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <TIM_Base_SetConfig+0x138>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	; (800204c <TIM_Base_SetConfig+0x13c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d017      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <TIM_Base_SetConfig+0x140>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <TIM_Base_SetConfig+0x144>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <TIM_Base_SetConfig+0x148>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <TIM_Base_SetConfig+0x14c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <TIM_Base_SetConfig+0x150>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <TIM_Base_SetConfig+0x154>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <TIM_Base_SetConfig+0x12c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0xf8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <TIM_Base_SetConfig+0x13c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f023 0201 	bic.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
  }
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40010400 	.word	0x40010400
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800
 800205c:	40001800 	.word	0x40001800
 8002060:	40001c00 	.word	0x40001c00
 8002064:	40002000 	.word	0x40002000

08002068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0208 	add.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0208 	add.w	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08a      	sub	sp, #40	; 0x28
 80020ee:	af04      	add	r7, sp, #16
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fd8d 	bl	8002c1c <pvPortMalloc>
 8002102:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d013      	beq.n	8002132 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800210a:	2058      	movs	r0, #88	; 0x58
 800210c:	f000 fd86 	bl	8002c1c <pvPortMalloc>
 8002110:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002118:	2258      	movs	r2, #88	; 0x58
 800211a:	2100      	movs	r1, #0
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f000 fff5 	bl	800310c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
 8002128:	e005      	b.n	8002136 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800212a:	6938      	ldr	r0, [r7, #16]
 800212c:	f000 fea2 	bl	8002e74 <vPortFree>
 8002130:	e001      	b.n	8002136 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d011      	beq.n	8002160 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002144:	2300      	movs	r3, #0
 8002146:	9303      	str	r3, [sp, #12]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f828 	bl	80021b0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002160:	697b      	ldr	r3, [r7, #20]
    }
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800216a:	b580      	push	{r7, lr}
 800216c:	b088      	sub	sp, #32
 800216e:	af02      	add	r7, sp, #8
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ffaf 	bl	80020ea <prvCreateTask>
 800218c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002194:	6938      	ldr	r0, [r7, #16]
 8002196:	f000 f899 	bl	80022cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e002      	b.n	80021a6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80021a6:	697b      	ldr	r3, [r7, #20]
    }
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	21a5      	movs	r1, #165	; 0xa5
 80021ca:	f000 ff9f 	bl	800310c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d8:	3b01      	subs	r3, #1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f023 0307 	bic.w	r3, r3, #7
 80021e6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	617b      	str	r3, [r7, #20]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002204:	bf00      	nop
 8002206:	e7fe      	b.n	8002206 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01e      	beq.n	800224c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e012      	b.n	800223a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	7819      	ldrb	r1, [r3, #0]
 800221c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	3334      	adds	r3, #52	; 0x34
 8002224:	460a      	mov	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d9e9      	bls.n	8002214 <prvInitialiseNewTask+0x64>
 8002240:	e000      	b.n	8002244 <prvInitialiseNewTask+0x94>
            {
                break;
 8002242:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	2b04      	cmp	r3, #4
 8002250:	d90a      	bls.n	8002268 <prvInitialiseNewTask+0xb8>
    __asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	613b      	str	r3, [r7, #16]
}
 8002264:	bf00      	nop
 8002266:	e7fe      	b.n	8002266 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b04      	cmp	r3, #4
 800226c:	d901      	bls.n	8002272 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800226e:	2304      	movs	r3, #4
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	3304      	adds	r3, #4
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff24 	bl	80020d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	3318      	adds	r3, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff1f 	bl	80020d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002296:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	f1c3 0205 	rsb	r2, r3, #5
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	69b8      	ldr	r0, [r7, #24]
 80022ae:	f000 fb8b 	bl	80029c8 <pxPortInitialiseStack>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80022d4:	f000 fbf0 	bl	8002ab8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80022d8:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <prvAddNewTaskToReadyList+0x114>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	4a40      	ldr	r2, [pc, #256]	; (80023e0 <prvAddNewTaskToReadyList+0x114>)
 80022e0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <prvAddNewTaskToReadyList+0x118>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80022ea:	4a3e      	ldr	r2, [pc, #248]	; (80023e4 <prvAddNewTaskToReadyList+0x118>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022f0:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <prvAddNewTaskToReadyList+0x114>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d110      	bne.n	800231a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80022f8:	f000 fb0a 	bl	8002910 <prvInitialiseTaskLists>
 80022fc:	e00d      	b.n	800231a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <prvAddNewTaskToReadyList+0x11c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <prvAddNewTaskToReadyList+0x118>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	429a      	cmp	r2, r3
 8002312:	d802      	bhi.n	800231a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002314:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <prvAddNewTaskToReadyList+0x118>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <prvAddNewTaskToReadyList+0x120>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <prvAddNewTaskToReadyList+0x120>)
 8002322:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <prvAddNewTaskToReadyList+0x120>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	2201      	movs	r2, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <prvAddNewTaskToReadyList+0x124>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <prvAddNewTaskToReadyList+0x124>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	492c      	ldr	r1, [pc, #176]	; (80023f4 <prvAddNewTaskToReadyList+0x128>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	3204      	adds	r2, #4
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <prvAddNewTaskToReadyList+0x128>)
 8002382:	441a      	add	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	4919      	ldr	r1, [pc, #100]	; (80023f4 <prvAddNewTaskToReadyList+0x128>)
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	4814      	ldr	r0, [pc, #80]	; (80023f4 <prvAddNewTaskToReadyList+0x128>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80023ae:	f000 fbb3 	bl	8002b18 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <prvAddNewTaskToReadyList+0x11c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00e      	beq.n	80023d8 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <prvAddNewTaskToReadyList+0x118>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <prvAddNewTaskToReadyList+0x10c>
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <prvAddNewTaskToReadyList+0x12c>)
 80023ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000014c 	.word	0x2000014c
 80023e4:	20000078 	.word	0x20000078
 80023e8:	20000158 	.word	0x20000158
 80023ec:	20000168 	.word	0x20000168
 80023f0:	20000154 	.word	0x20000154
 80023f4:	2000007c 	.word	0x2000007c
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <vTaskSuspendAll+0x18>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a03      	ldr	r2, [pc, #12]	; (8002414 <vTaskSuspendAll+0x18>)
 8002408:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	20000170 	.word	0x20000170

08002418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002426:	f000 fb47 	bl	8002ab8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800242e:	4b75      	ldr	r3, [pc, #468]	; (8002604 <xTaskResumeAll+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <xTaskResumeAll+0x34>
    __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	603b      	str	r3, [r7, #0]
}
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800244c:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <xTaskResumeAll+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a6c      	ldr	r2, [pc, #432]	; (8002604 <xTaskResumeAll+0x1ec>)
 8002454:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <xTaskResumeAll+0x1ec>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80ca 	bne.w	80025f4 <xTaskResumeAll+0x1dc>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002460:	4b69      	ldr	r3, [pc, #420]	; (8002608 <xTaskResumeAll+0x1f0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80c5 	beq.w	80025f4 <xTaskResumeAll+0x1dc>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800246a:	e08e      	b.n	800258a <xTaskResumeAll+0x172>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800246c:	4b67      	ldr	r3, [pc, #412]	; (800260c <xTaskResumeAll+0x1f4>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	6a12      	ldr	r2, [r2, #32]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	69d2      	ldr	r2, [r2, #28]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3318      	adds	r3, #24
 8002496:	429a      	cmp	r2, r3
 8002498:	d103      	bne.n	80024a2 <xTaskResumeAll+0x8a>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	68d2      	ldr	r2, [r2, #12]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3304      	adds	r3, #4
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d103      	bne.n	80024e0 <xTaskResumeAll+0xc8>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2201      	movs	r2, #1
 80024f6:	409a      	lsls	r2, r3
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <xTaskResumeAll+0x1f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <xTaskResumeAll+0x1f8>)
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002506:	4943      	ldr	r1, [pc, #268]	; (8002614 <xTaskResumeAll+0x1fc>)
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3304      	adds	r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	3204      	adds	r2, #4
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	1d1a      	adds	r2, r3, #4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4a33      	ldr	r2, [pc, #204]	; (8002614 <xTaskResumeAll+0x1fc>)
 8002546:	441a      	add	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	4930      	ldr	r1, [pc, #192]	; (8002614 <xTaskResumeAll+0x1fc>)
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	482b      	ldr	r0, [pc, #172]	; (8002614 <xTaskResumeAll+0x1fc>)
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <xTaskResumeAll+0x200>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	429a      	cmp	r2, r3
 800257e:	d904      	bls.n	800258a <xTaskResumeAll+0x172>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002580:	4a26      	ldr	r2, [pc, #152]	; (800261c <xTaskResumeAll+0x204>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2101      	movs	r1, #1
 8002586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <xTaskResumeAll+0x1f4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f af6c 	bne.w	800246c <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <xTaskResumeAll+0x186>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800259a:	f000 f9f9 	bl	8002990 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <xTaskResumeAll+0x208>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <xTaskResumeAll+0x1b8>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80025aa:	f000 f83d 	bl	8002628 <xTaskIncrementTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <xTaskResumeAll+0x1a6>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <xTaskResumeAll+0x204>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2101      	movs	r1, #1
 80025ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <xTaskResumeAll+0x192>

                            xPendedTicks = 0;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <xTaskResumeAll+0x208>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <xTaskResumeAll+0x204>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <xTaskResumeAll+0x1dc>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <xTaskResumeAll+0x200>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <xTaskResumeAll+0x20c>)
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025f4:	f000 fa90 	bl	8002b18 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80025f8:	69bb      	ldr	r3, [r7, #24]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000170 	.word	0x20000170
 8002608:	2000014c 	.word	0x2000014c
 800260c:	20000110 	.word	0x20000110
 8002610:	20000154 	.word	0x20000154
 8002614:	2000007c 	.word	0x2000007c
 8002618:	20000078 	.word	0x20000078
 800261c:	20000160 	.word	0x20000160
 8002620:	2000015c 	.word	0x2000015c
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002632:	4b7e      	ldr	r3, [pc, #504]	; (800282c <xTaskIncrementTick+0x204>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80ee 	bne.w	8002818 <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800263c:	4b7c      	ldr	r3, [pc, #496]	; (8002830 <xTaskIncrementTick+0x208>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002644:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <xTaskIncrementTick+0x208>)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d120      	bne.n	8002692 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <xTaskIncrementTick+0x20c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <xTaskIncrementTick+0x48>
    __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	607b      	str	r3, [r7, #4]
}
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <xTaskIncrementTick+0x46>
 8002670:	4b70      	ldr	r3, [pc, #448]	; (8002834 <xTaskIncrementTick+0x20c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <xTaskIncrementTick+0x210>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <xTaskIncrementTick+0x20c>)
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <xTaskIncrementTick+0x210>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <xTaskIncrementTick+0x214>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	4a6c      	ldr	r2, [pc, #432]	; (800283c <xTaskIncrementTick+0x214>)
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	f000 f97f 	bl	8002990 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002692:	4b6b      	ldr	r3, [pc, #428]	; (8002840 <xTaskIncrementTick+0x218>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	f0c0 80a8 	bcc.w	80027ee <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <xTaskIncrementTick+0x20c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80026a8:	4b65      	ldr	r3, [pc, #404]	; (8002840 <xTaskIncrementTick+0x218>)
 80026aa:	f04f 32ff 	mov.w	r2, #4294967295
 80026ae:	601a      	str	r2, [r3, #0]
                    break;
 80026b0:	e09d      	b.n	80027ee <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026b2:	4b60      	ldr	r3, [pc, #384]	; (8002834 <xTaskIncrementTick+0x20c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026c2:	6a3a      	ldr	r2, [r7, #32]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d203      	bcs.n	80026d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <xTaskIncrementTick+0x218>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	6013      	str	r3, [r2, #0]
                        break;
 80026d0:	e08d      	b.n	80027ee <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	3304      	adds	r3, #4
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d103      	bne.n	8002700 <xTaskIncrementTick+0xd8>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01e      	beq.n	8002756 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	6a12      	ldr	r2, [r2, #32]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69d2      	ldr	r2, [r2, #28]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3318      	adds	r3, #24
 800273a:	429a      	cmp	r2, r3
 800273c:	d103      	bne.n	8002746 <xTaskIncrementTick+0x11e>
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2200      	movs	r2, #0
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <xTaskIncrementTick+0x21c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	4a37      	ldr	r2, [pc, #220]	; (8002844 <xTaskIncrementTick+0x21c>)
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	4936      	ldr	r1, [pc, #216]	; (8002848 <xTaskIncrementTick+0x220>)
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	3204      	adds	r2, #4
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1d1a      	adds	r2, r3, #4
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4a27      	ldr	r2, [pc, #156]	; (8002848 <xTaskIncrementTick+0x220>)
 80027ac:	441a      	add	r2, r3
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4924      	ldr	r1, [pc, #144]	; (8002848 <xTaskIncrementTick+0x220>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027c8:	1c59      	adds	r1, r3, #1
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <xTaskIncrementTick+0x220>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4403      	add	r3, r0
 80027d6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <xTaskIncrementTick+0x224>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	f67f af5b 	bls.w	800269e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ec:	e757      	b.n	800269e <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <xTaskIncrementTick+0x224>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	4914      	ldr	r1, [pc, #80]	; (8002848 <xTaskIncrementTick+0x220>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d901      	bls.n	800280a <xTaskIncrementTick+0x1e2>
                {
                    xSwitchRequired = pdTRUE;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <xTaskIncrementTick+0x228>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <xTaskIncrementTick+0x1fa>
                {
                    xSwitchRequired = pdTRUE;
 8002812:	2301      	movs	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e004      	b.n	8002822 <xTaskIncrementTick+0x1fa>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <xTaskIncrementTick+0x22c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <xTaskIncrementTick+0x22c>)
 8002820:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002824:	4618      	mov	r0, r3
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000170 	.word	0x20000170
 8002830:	20000150 	.word	0x20000150
 8002834:	20000108 	.word	0x20000108
 8002838:	2000010c 	.word	0x2000010c
 800283c:	20000164 	.word	0x20000164
 8002840:	2000016c 	.word	0x2000016c
 8002844:	20000154 	.word	0x20000154
 8002848:	2000007c 	.word	0x2000007c
 800284c:	20000078 	.word	0x20000078
 8002850:	20000160 	.word	0x20000160
 8002854:	2000015c 	.word	0x2000015c

08002858 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <vTaskSwitchContext+0xa4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <vTaskSwitchContext+0xa8>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800286c:	e040      	b.n	80028f0 <vTaskSwitchContext+0x98>
            xYieldPendings[ 0 ] = pdFALSE;
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <vTaskSwitchContext+0xa8>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <vTaskSwitchContext+0xac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	f1c3 031f 	rsb	r3, r3, #31
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	491f      	ldr	r1, [pc, #124]	; (8002908 <vTaskSwitchContext+0xb0>)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <vTaskSwitchContext+0x5c>
    __asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	607b      	str	r3, [r7, #4]
}
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <vTaskSwitchContext+0x5a>
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <vTaskSwitchContext+0xb0>)
 80028c0:	4413      	add	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	3308      	adds	r3, #8
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d103      	bne.n	80028e2 <vTaskSwitchContext+0x8a>
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <vTaskSwitchContext+0xb4>)
 80028ea:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <vTaskSwitchContext+0xb4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
    }
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000170 	.word	0x20000170
 8002900:	20000160 	.word	0x20000160
 8002904:	20000154 	.word	0x20000154
 8002908:	2000007c 	.word	0x2000007c
 800290c:	20000078 	.word	0x20000078

08002910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	e00c      	b.n	8002936 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <prvInitialiseTaskLists+0x60>)
 8002928:	4413      	add	r3, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fbb0 	bl	8002090 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3301      	adds	r3, #1
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d9ef      	bls.n	800291c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800293c:	480d      	ldr	r0, [pc, #52]	; (8002974 <prvInitialiseTaskLists+0x64>)
 800293e:	f7ff fba7 	bl	8002090 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <prvInitialiseTaskLists+0x68>)
 8002944:	f7ff fba4 	bl	8002090 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <prvInitialiseTaskLists+0x6c>)
 800294a:	f7ff fba1 	bl	8002090 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800294e:	480c      	ldr	r0, [pc, #48]	; (8002980 <prvInitialiseTaskLists+0x70>)
 8002950:	f7ff fb9e 	bl	8002090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002954:	480b      	ldr	r0, [pc, #44]	; (8002984 <prvInitialiseTaskLists+0x74>)
 8002956:	f7ff fb9b 	bl	8002090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <prvInitialiseTaskLists+0x78>)
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <prvInitialiseTaskLists+0x64>)
 800295e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <prvInitialiseTaskLists+0x7c>)
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <prvInitialiseTaskLists+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000007c 	.word	0x2000007c
 8002974:	200000e0 	.word	0x200000e0
 8002978:	200000f4 	.word	0x200000f4
 800297c:	20000110 	.word	0x20000110
 8002980:	20000124 	.word	0x20000124
 8002984:	20000138 	.word	0x20000138
 8002988:	20000108 	.word	0x20000108
 800298c:	2000010c 	.word	0x2000010c

08002990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <prvResetNextTaskUnblockTime+0x30>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <prvResetNextTaskUnblockTime+0x34>)
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029a6:	e005      	b.n	80029b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <prvResetNextTaskUnblockTime+0x30>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <prvResetNextTaskUnblockTime+0x34>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000108 	.word	0x20000108
 80029c4:	2000016c 	.word	0x2000016c

080029c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3b04      	subs	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b04      	subs	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b04      	subs	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <pxPortInitialiseStack+0x64>)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b14      	subs	r3, #20
 8002a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3b04      	subs	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f06f 0202 	mvn.w	r2, #2
 8002a16:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b20      	subs	r3, #32
 8002a1c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	08002a31 	.word	0x08002a31

08002a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <prvTaskExitError+0x54>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d00a      	beq.n	8002a5a <prvTaskExitError+0x2a>
    __asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	60fb      	str	r3, [r7, #12]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <prvTaskExitError+0x28>
    __asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
}
 8002a6c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a6e:	bf00      	nop
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0fc      	beq.n	8002a70 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	2000000c 	.word	0x2000000c
	...

08002a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <pxCurrentTCBConst2>)
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	6808      	ldr	r0, [r1, #0]
 8002a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	f380 8809 	msr	PSP, r0
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8811 	msr	BASEPRI, r0
 8002aaa:	4770      	bx	lr
 8002aac:	f3af 8000 	nop.w

08002ab0 <pxCurrentTCBConst2>:
 8002ab0:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop

08002ab8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
    __asm volatile
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	607b      	str	r3, [r7, #4]
}
 8002ad0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <vPortEnterCritical+0x58>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <vPortEnterCritical+0x58>)
 8002ada:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <vPortEnterCritical+0x58>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <vPortEnterCritical+0x5c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <vPortEnterCritical+0x4c>
    __asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	603b      	str	r3, [r7, #0]
}
 8002b00:	bf00      	nop
 8002b02:	e7fe      	b.n	8002b02 <vPortEnterCritical+0x4a>
    }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <vPortExitCritical+0x50>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <vPortExitCritical+0x24>
    __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	607b      	str	r3, [r7, #4]
}
 8002b38:	bf00      	nop
 8002b3a:	e7fe      	b.n	8002b3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <vPortExitCritical+0x50>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <vPortExitCritical+0x50>)
 8002b44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <vPortExitCritical+0x50>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <vPortExitCritical+0x42>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002b58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c
 8002b6c:	00000000 	.word	0x00000000

08002b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b70:	f3ef 8009 	mrs	r0, PSP
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <pxCurrentTCBConst>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	f01e 0f10 	tst.w	lr, #16
 8002b80:	bf08      	it	eq
 8002b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8a:	6010      	str	r0, [r2, #0]
 8002b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b94:	f380 8811 	msr	BASEPRI, r0
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f7ff fe5a 	bl	8002858 <vTaskSwitchContext>
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	f380 8811 	msr	BASEPRI, r0
 8002bac:	bc09      	pop	{r0, r3}
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	6808      	ldr	r0, [r1, #0]
 8002bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb6:	f01e 0f10 	tst.w	lr, #16
 8002bba:	bf08      	it	eq
 8002bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bc0:	f380 8809 	msr	PSP, r0
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	f3af 8000 	nop.w

08002bd0 <pxCurrentTCBConst>:
 8002bd0:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop

08002bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
    __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	607b      	str	r3, [r7, #4]
}
 8002bf0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002bf2:	f7ff fd19 	bl	8002628 <xTaskIncrementTick>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <SysTick_Handler+0x40>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f383 8811 	msr	BASEPRI, r3
}
 8002c0e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d022      	beq.n	8002c74 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c2e:	2308      	movs	r3, #8
 8002c30:	43db      	mvns	r3, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d81b      	bhi.n	8002c70 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c38:	2208      	movs	r2, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d014      	beq.n	8002c74 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	f1c3 0308 	rsb	r3, r3, #8
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d804      	bhi.n	8002c6a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	4413      	add	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	e004      	b.n	8002c74 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e001      	b.n	8002c74 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002c74:	f7ff fbc2 	bl	80023fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c78:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <pvPortMalloc+0x23c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002c80:	f000 f970 	bl	8002f64 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f2c0 80ce 	blt.w	8002e28 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80ca 	beq.w	8002e28 <pvPortMalloc+0x20c>
 8002c94:	4b71      	ldr	r3, [pc, #452]	; (8002e5c <pvPortMalloc+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	f200 80c4 	bhi.w	8002e28 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <pvPortMalloc+0x244>)
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002ca4:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <pvPortMalloc+0x244>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <pvPortMalloc+0x248>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d305      	bcc.n	8002cbe <pvPortMalloc+0xa2>
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <pvPortMalloc+0x24c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d801      	bhi.n	8002cbe <pvPortMalloc+0xa2>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <pvPortMalloc+0xa4>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d127      	bne.n	8002d14 <pvPortMalloc+0xf8>
    __asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	623b      	str	r3, [r7, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	4a5f      	ldr	r2, [pc, #380]	; (8002e64 <pvPortMalloc+0x248>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d305      	bcc.n	8002cf8 <pvPortMalloc+0xdc>
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	4a5e      	ldr	r2, [pc, #376]	; (8002e68 <pvPortMalloc+0x24c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d801      	bhi.n	8002cf8 <pvPortMalloc+0xdc>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <pvPortMalloc+0xde>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <pvPortMalloc+0xf8>
    __asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61fb      	str	r3, [r7, #28]
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d903      	bls.n	8002d26 <pvPortMalloc+0x10a>
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1d9      	bne.n	8002cda <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <pvPortMalloc+0x23c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d07b      	beq.n	8002e28 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	4413      	add	r3, r2
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	4a49      	ldr	r2, [pc, #292]	; (8002e64 <pvPortMalloc+0x248>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d305      	bcc.n	8002d4e <pvPortMalloc+0x132>
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	4a48      	ldr	r2, [pc, #288]	; (8002e68 <pvPortMalloc+0x24c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d801      	bhi.n	8002d4e <pvPortMalloc+0x132>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <pvPortMalloc+0x134>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <pvPortMalloc+0x14e>
    __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	61bb      	str	r3, [r7, #24]
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d90a      	bls.n	8002d92 <pvPortMalloc+0x176>
    __asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	617b      	str	r3, [r7, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad2      	subs	r2, r2, r3
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d923      	bls.n	8002dea <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <pvPortMalloc+0x1ae>
    __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <pvPortMalloc+0x240>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <pvPortMalloc+0x240>)
 8002df6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <pvPortMalloc+0x240>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <pvPortMalloc+0x250>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d203      	bcs.n	8002e0c <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <pvPortMalloc+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <pvPortMalloc+0x250>)
 8002e0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <pvPortMalloc+0x254>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <pvPortMalloc+0x254>)
 8002e26:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e28:	f7ff faf6 	bl	8002418 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <pvPortMalloc+0x230>
    __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	60fb      	str	r3, [r7, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <pvPortMalloc+0x22e>
    return pvReturn;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3738      	adds	r7, #56	; 0x38
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20012d7c 	.word	0x20012d7c
 8002e5c:	20012d80 	.word	0x20012d80
 8002e60:	20012d74 	.word	0x20012d74
 8002e64:	20000174 	.word	0x20000174
 8002e68:	20012d73 	.word	0x20012d73
 8002e6c:	20012d84 	.word	0x20012d84
 8002e70:	20012d88 	.word	0x20012d88

08002e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d061      	beq.n	8002f4a <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e86:	2308      	movs	r3, #8
 8002e88:	425b      	negs	r3, r3
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <vPortFree+0xe0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d305      	bcc.n	8002ea8 <vPortFree+0x34>
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <vPortFree+0xe4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d801      	bhi.n	8002ea8 <vPortFree+0x34>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <vPortFree+0x36>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <vPortFree+0x50>
    __asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	617b      	str	r3, [r7, #20]
}
 8002ec0:	bf00      	nop
 8002ec2:	e7fe      	b.n	8002ec2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <vPortFree+0x6e>
    __asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	613b      	str	r3, [r7, #16]
}
 8002ede:	bf00      	nop
 8002ee0:	e7fe      	b.n	8002ee0 <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <vPortFree+0x8c>
    __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60fb      	str	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0fdb      	lsrs	r3, r3, #31
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01c      	beq.n	8002f4a <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f24:	f7ff fa6a 	bl	80023fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <vPortFree+0xe8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <vPortFree+0xe8>)
 8002f34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f36:	69b8      	ldr	r0, [r7, #24]
 8002f38:	f000 f86e 	bl	8003018 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <vPortFree+0xec>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <vPortFree+0xec>)
 8002f44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f46:	f7ff fa67 	bl	8002418 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f4a:	bf00      	nop
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000174 	.word	0x20000174
 8002f58:	20012d73 	.word	0x20012d73
 8002f5c:	20012d80 	.word	0x20012d80
 8002f60:	20012d8c 	.word	0x20012d8c

08002f64 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f6a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <prvHeapInit+0xa0>)
 8002f72:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3307      	adds	r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <prvHeapInit+0xa0>)
 8002f94:	4413      	add	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <prvHeapInit+0xa4>)
 8002f9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <prvHeapInit+0xa4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002fac:	2208      	movs	r2, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <prvHeapInit+0xa8>)
 8002fc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <prvHeapInit+0xa8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <prvHeapInit+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <prvHeapInit+0xa8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <prvHeapInit+0xac>)
 8002fee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	; (8003014 <prvHeapInit+0xb0>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000174 	.word	0x20000174
 8003008:	20012d74 	.word	0x20012d74
 800300c:	20012d7c 	.word	0x20012d7c
 8003010:	20012d84 	.word	0x20012d84
 8003014:	20012d80 	.word	0x20012d80

08003018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003020:	4b36      	ldr	r3, [pc, #216]	; (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e002      	b.n	800302c <prvInsertBlockIntoFreeList+0x14>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d8f7      	bhi.n	8003026 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a30      	ldr	r2, [pc, #192]	; (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d017      	beq.n	800306e <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <prvInsertBlockIntoFreeList+0xe8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d305      	bcc.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4a2e      	ldr	r2, [pc, #184]	; (8003104 <prvInsertBlockIntoFreeList+0xec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d801      	bhi.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <prvInsertBlockIntoFreeList+0x3c>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60fb      	str	r3, [r7, #12]
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d108      	bne.n	8003092 <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	441a      	add	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	441a      	add	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d118      	bne.n	80030d8 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d00d      	beq.n	80030ce <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e008      	b.n	80030e0 <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e003      	b.n	80030e0 <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d002      	beq.n	80030ee <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20012d74 	.word	0x20012d74
 8003100:	20000174 	.word	0x20000174
 8003104:	20012d73 	.word	0x20012d73
 8003108:	20012d7c 	.word	0x20012d7c

0800310c <memset>:
 800310c:	4402      	add	r2, r0
 800310e:	4603      	mov	r3, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	d100      	bne.n	8003116 <memset+0xa>
 8003114:	4770      	bx	lr
 8003116:	f803 1b01 	strb.w	r1, [r3], #1
 800311a:	e7f9      	b.n	8003110 <memset+0x4>

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	4d0d      	ldr	r5, [pc, #52]	; (8003154 <__libc_init_array+0x38>)
 8003120:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	2600      	movs	r6, #0
 8003128:	42a6      	cmp	r6, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	4d0b      	ldr	r5, [pc, #44]	; (800315c <__libc_init_array+0x40>)
 800312e:	4c0c      	ldr	r4, [pc, #48]	; (8003160 <__libc_init_array+0x44>)
 8003130:	f000 f818 	bl	8003164 <_init>
 8003134:	1b64      	subs	r4, r4, r5
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	2600      	movs	r6, #0
 800313a:	42a6      	cmp	r6, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f855 3b04 	ldr.w	r3, [r5], #4
 8003144:	4798      	blx	r3
 8003146:	3601      	adds	r6, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f855 3b04 	ldr.w	r3, [r5], #4
 800314e:	4798      	blx	r3
 8003150:	3601      	adds	r6, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	080031d4 	.word	0x080031d4
 8003158:	080031d4 	.word	0x080031d4
 800315c:	080031d4 	.word	0x080031d4
 8003160:	080031d8 	.word	0x080031d8

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
